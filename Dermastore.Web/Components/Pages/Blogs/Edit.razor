@page "/blogs/edit"
@using Dermastore.Application.Commands.Blogs
@using Dermastore.Application.DTOs.Blogs
@using Dermastore.Application.Queries.Blogs.GetBlogById
@using MediatR
@using Microsoft.EntityFrameworkCore
@using Dermastore.Domain.Entities
@inject NavigationManager NavigationManager
@inject IMediator Mediator
<PageTitle>Edit Blog</PageTitle>

<style>
    .edit-card {
        max-width: 600px;
        margin: auto;
    }

    .card-header {
        background-color: #588157;
        color: white;
        padding: 1rem;
    }

    .back-button {
        position: absolute;
        top: 10px;
        left: 10px;
    }
</style>

<div class="container my-5 position-relative">

    <div class="edit-card">
        <div class="card shadow-sm">
            <div class="card-header">
                <a href="/blogs" class="btn btn-light text-primary">
                    Back to List
                </a>
                <h2 class="mb-0">Edit Blog</h2>
            </div>
            <div class="card-body">
                @if (blogDto is null)
                {
                    <p class="text-center"><em>Loading...</em></p>
                }
                else
                {
                    <EditForm method="post" Model="blogDto" OnValidSubmit="UpdateBlog" FormName="edit" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary role="alert" class="text-danger" />
                        <input type="hidden" name="blogDto.Id" value="@blogDto.Id" />
                        <div class="mb-3">
                            <label for="title" class="form-label">Title:</label>
                            <InputText id="title" @bind-Value="blogDto.Title" class="form-control" />
                            <ValidationMessage For="() => blogDto.Title" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="content" class="form-label">Content:</label>
                            <InputTextArea id="content" @bind-Value="blogDto.Content" class="form-control" Rows="8" />
                            <ValidationMessage For="() => blogDto.Content" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="userid" class="form-label">User Id:</label>
                            <InputNumber id="userid" @bind-Value="blogDto.UserId" class="form-control" />
                            <ValidationMessage For="() => blogDto.UserId" class="text-danger" />
                        </div>
                        <input type="hidden" name="blogDto.DatePublished" value="@blogDto.DatePublished" />
                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private BlogToUpdateDto blogDto { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var blogQuery = new GetBlogQuery(Id);
        var blog = await Mediator.Send(blogQuery);

        blogDto.Id = blog.Id;
        blogDto.Title = blog.Title;
        blogDto.Content = blog.Content;
        blogDto.UserId = blog.UserId;
        blogDto.DatePublished = blog.DatePublished;
    }

    private async Task UpdateBlog()
    {
        var command = new UpdateBlogCommand(blogDto);
        var blogId = await Mediator.Send(command);
        NavigationManager.NavigateTo($"/blogs/details?id={blogId}");
    }
}
