@page "/cart"
@using Dermastore.Application.Commands.Customers
@using Dermastore.Application.Commands.Orders
@using Dermastore.Application.Commands.Vnpays
@using Dermastore.Application.DTOs
@using Dermastore.Application.DTOs.CartDTOs
@using Dermastore.Application.DTOs.Orders
@using Dermastore.Application.Queries.DeliveryMethods
@using Dermastore.Application.Queries.Promotions
@using Dermastore.Application.Queries.Users
@using Dermastore.Application.Extensions;
@using Dermastore.Web.Containers
@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer
@inject CartStateContainer CartStateContainer
@inject ProtectedLocalStorage ProtectedLocalStore
@inject AuthStateContainer AuthStateContainer
@inject NavigationManager NavigationManager
@inject IMediator Mediator

<div class="p-4 my-5 card shadow-lg col-md-11 mx-auto min-vh-100">
    <h2 class="text-primary mb-4">Shopping Cart</h2>

    <div class="border-1 border-bottom border-dark my-3"></div>

    @if (CartStateContainer.Cart != null && CartStateContainer.Cart.Items.Any())
    {
        <div class="row">
            <!-- Cart Items -->
            <div class="col-md-8 pe-5">
                @foreach (var item in CartStateContainer.Cart.Items)
                {
                    <div class="d-flex align-items-center border-bottom pb-3 mb-3">
                        <img src="@item.ImageUrl" alt="@item.ProductName" class="img-thumbnail mr-3" style="width: 100px; height: 100px;" />
                        <div class="ms-3 flex-grow-1">
                            <h3 class="h5 font-weight-bold">@item.ProductName</h3>
                            <p class="text-muted">@string.Format("{0}đ", item.Price.ToString("N0"))</p>
                        </div>
                        <div class="d-flex align-items-center me-3">
                            <button class="btn btn-secondary btn-sm text-white" @onclick="() => DecreaseQuantity(item)"><i class="fa fa-minus"></i></button>
                            <span class="mx-2">@item.Quantity</span>
                            <button class="btn btn-secondary btn-sm text-white" @onclick="() => IncreaseQuantity(item)"><i class="fa fa-plus"></i></button>
                        </div>
                        <button class="btn btn-danger ml-3" @onclick="() => RemoveItem(item)"><i class="fa fa-trash-can"></i></button>
                    </div>
                }
                <!-- Clear Cart Button -->
                <button class="btn btn-danger mt-3" @onclick="ClearCart"><i class="fa fa-shopping-cart me-2"></i>Clear Cart</button>

                @if (currentUser != null)
                {
                    <!-- Shipping Information -->
                    <div class="card p-3 my-4">
                        <h5 class="mb-3">Shipping</h5>
                        <div class="row mb-3">
                            <div class="col-sm-6">
                                <label class="form-label">First Name</label>
                                <input class="form-control" @bind="currentUser.FirstName" />
                            </div>
                            <div class="col-sm-6">
                                <label class="form-label">First Name</label>
                                <input class="form-control" @bind="currentUser.LastName" />
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-sm-6">
                                <label class="form-label">Phone Number</label>
                                <input class="form-control" @bind="currentUser.PhoneNumber" />
                            </div>
                            <div class="col-sm-6">
                                <label class="form-label">Email</label>
                                <input class="form-control" @bind="currentUser.Email" />
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-sm-12">
                                <label class="form-label">Address</label>
                                <input class="form-control" @bind="currentUser.Address" />
                            </div>
                        </div>
                    </div>

                    <!-- Clear Cart Button -->
                    <div class="d-flex justify-content-start align-items-center gap-3">
                        <button class="btn btn-primary" @onclick="UpdateCustomerInfo"><i class="fa fa-edit me-2"></i>Update</button>
                        @if (updateResult.HasValue && updateResult.Value){
                            <div class="text-success">Update Successfully</div>
                        }
                        @if (updateResult.HasValue && !updateResult.Value)
                        {
                            <div class="text-danger">Update Failed</div>
                        }
                    </div>
                }
            </div>

            <!-- Order Summary -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title text-primary">Order Summary</h3>

                        <div class="border-1 border-bottom border-dark my-3"></div>

                        <!-- Subtotal Price -->
                        <p class="card-text mb-4">SUBTOTAL: <strong>@string.Format("{0}đ", CalculateSubtotal().ToString("N0"))</strong></p>

                        <!-- Delivery Method Dropdown -->
                        <div class="form-group mb-4">
                            <label for="deliveryMethod" class="form-label">Delivery Method</label>
                            <select id="deliveryMethod" class="form-select" @onchange="HandleDeliveryMethodChange">
                                <option value="">Select a delivery method</option>
                                @if (deliveryMethods != null)
                                {
                                    @foreach (var deliveryMethod in deliveryMethods)
                                    {
                                        <option value="@deliveryMethod.Id" selected="@(selectedDeliveryMethod == deliveryMethod.Id.ToString())">@deliveryMethod.Name | @string.Format("{0}đ", deliveryMethod.Price.ToString("N0"))</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- Promotion Code Input -->
                        <div class="form-group mb-4">
                            <label for="promotionCode" class="form-label">Promotion Code</label>
                            <input type="text" id="promotionCode" class="form-control" placeholder="Promotion code" @bind="promotionCode"/>
                        </div>
                        <div class="d-flex justify-content-start align-items-center gap-3">
                            <button class="btn btn-secondary text-white w-25" @onclick="ApplyPromotion">Apply</button>
                            @if (appliedPromotion != null)
                            {
                                <p class="text-success mb-0">@appliedPromotion.Name | <strong>@string.Format("{0}%", appliedPromotion.Discount * 100)</strong></p>
                            }
                        </div>

                        <!--  Customer Membership -->
                        @if (currentUser != null && currentUser.Membership != null)
                        {
                            <div class="mt-4 mb-2">Membership</div>
                            <div class="d-flex justify-content-start align-items-center gap-3">
                                <div class="badge bg-primary">@currentUser.Membership.Name</div>
                                <div><strong>@string.Format("{0}%", currentUser.Membership.Discount * 100) Off</strong></div>
                            </div>
                        }


                        <div class="border-1 border-bottom border-dark my-3"></div>


                        <!-- Total Price -->
                        <p class="card-text my-4">TOTAL: <strong>@string.Format("{0}đ", CalculateTotal().ToString("N0"))</strong></p>
                        <button class="btn btn-primary text-white w-100" @onclick="Checkout">Checkout</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">Your cart is empty.</div>
    }
</div>

@code {
    private string promotionCode = string.Empty;
    private PromotionDto? appliedPromotion;
    private IReadOnlyList<DeliveryMethodDto> deliveryMethods;
    private string? selectedDeliveryMethod;
    private UserDto? currentUser;
    private bool? updateResult;

    //==============================================
    //                  LIFE CYCLE
    //==============================================
    protected override async Task OnInitializedAsync()
    {
        await LoadDeliveryMethods();
        await LoadCurrentUser();
        appliedPromotion = CartStateContainer.Cart != null ? CartStateContainer.Cart.Promotion : null;

        if (appliedPromotion != null)
        {
            promotionCode = appliedPromotion.Code;
        }

        if (CartStateContainer.Cart != null && CartStateContainer.Cart.DeliveryMethod != null)
        {
            selectedDeliveryMethod = CartStateContainer.Cart.DeliveryMethod.Id.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedLocalStore.GetAsync<string>("cartId");
            if (result.Success && result.Value != null)
            {
                await CartStateContainer.LoadCartAsync(result.Value);
            }
            await LoadDeliveryMethods();
            CartStateContainer.OnChange += StateHasChanged;
        }
    }

    //==============================================
    //              CART STATE MANAGEMENT
    //==============================================


    // Increase quantity of a specific item
    private async Task IncreaseQuantity(CartItemDto item)
    {
        item.Quantity++;
        await CartStateContainer.UpdateCartAsync(CartStateContainer.Cart);
    }

    // Decrease quantity of a specific item
    private async Task DecreaseQuantity(CartItemDto item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            await CartStateContainer.UpdateCartAsync(CartStateContainer.Cart);
        }
    }

    // Remove item from the cart
    private async Task RemoveItem(CartItemDto item)
    {
        CartStateContainer.Cart.Items.Remove(item);
        await CartStateContainer.UpdateCartAsync(CartStateContainer.Cart);

        if (CartStateContainer.Cart.Items.Count() == 0)
        {
            await CartStateContainer.DeleteCartAsync();
        }
    }

    // Completely remove the cart
    private async Task ClearCart()
    {
        await CartStateContainer.DeleteCartAsync();
        await ProtectedLocalStore.DeleteAsync("cartId");
    }

    // Calculate the total price of all item (does not include promotions, extra fees)
    private decimal CalculateSubtotal()
    {
        return CartStateContainer.Cart.Items.Sum(i => i.Price * i.Quantity);
    }

    // Calculate the total price  (include promotions, extra fees)
    private decimal CalculateTotal()
    {
        var subtotal = CalculateSubtotal();
        decimal discount = 0;
        decimal deliveryCost = 0;

        if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            var deliveryMethod = deliveryMethods.FirstOrDefault(d => d.Id == int.Parse(selectedDeliveryMethod));
            if (deliveryMethod != null)
            {
                deliveryCost = deliveryMethod.Price;
            }
        }

        if (appliedPromotion != null)
        {
            discount += appliedPromotion.Discount;
        }

        if (currentUser != null && currentUser.Membership != null)
        {
            discount += currentUser.Membership.Discount;
        }

        return (subtotal * (1 - discount)) + deliveryCost;
    }

    // Apply promotion and save to the cart
    private async Task ApplyPromotion()
    {
        if (!string.IsNullOrWhiteSpace(promotionCode))
        {
            appliedPromotion = await Mediator.Send(new GetPromotionQuery(promotionCode));
        }

        CartStateContainer.Cart.Promotion = appliedPromotion;
        await CartStateContainer.UpdateCartAsync(CartStateContainer.Cart);
    }

    // Change delivery method and save to the cart
    private async Task HandleDeliveryMethodChange(ChangeEventArgs e)
    {
        selectedDeliveryMethod = e.Value.ToString();
        var deliveryMethod = deliveryMethods.FirstOrDefault(d => d.Id == int.Parse(selectedDeliveryMethod));
        CartStateContainer.Cart.DeliveryMethod = deliveryMethod;
        await CartStateContainer.UpdateCartAsync(CartStateContainer.Cart);
    }

    // Load delivery methods for dropdown
    private async Task LoadDeliveryMethods()
    {
        deliveryMethods = await Mediator.Send(new GetDeliveryMethodsQuery());
    }

    // Get current user
    private async Task LoadCurrentUser()
    {
        var query = new GetUserQuery(AuthStateContainer.Auth.Id);
        var user = await Mediator.Send(query);
        currentUser = user.ToDto();
    }

    // Update customer information (shipping address,...)
    private async Task UpdateCustomerInfo()
    {
        var command = new UpdateCustomerCommand(currentUser);
        updateResult = await Mediator.Send(command);
    }


    //==============================================
    //              CHECKOUT FLOW
    //==============================================
    private async Task Checkout()
    {
        // Populate order items list
        var deliveryMethod = deliveryMethods.FirstOrDefault(d => d.Id == int.Parse(selectedDeliveryMethod));

        var orderItems = new List<OrderItemDto>();

        if (CartStateContainer.Cart != null && CartStateContainer.Cart.Items.Any())
        {
            foreach (CartItemDto cartItem in CartStateContainer.Cart.Items)
            {
                var productItem = new ProductItemOrderedDto()
                {
                    ImageUrl = cartItem.ImageUrl,
                    ProductName = cartItem.ProductName,
                    ProductId = cartItem.ProductId
                };

                var orderItem = new OrderItemDto()
                {
                    ItemOrdered = productItem,
                    Price = cartItem.Price,
                    Quantity = cartItem.Quantity
                };

                orderItems.Add(orderItem);
            }
        }

        // Create an order in pending state
        var orderDto = new OrderToAddDto
        {
            OrderDate = DateTime.UtcNow,
            ShippingAddress = currentUser.Address,
            DeliveryMethodId = deliveryMethod.Id,
            MembershipId = (currentUser != null && currentUser.Membership != null) ? currentUser.Membership.Id : null,
            PromotionId = (appliedPromotion != null) ? appliedPromotion.Id : null,
            SubTotal = CalculateSubtotal(),
            UserId = currentUser.Id,
            OrderItems = orderItems
        };

        // Send create order command
        var createOrderCommand = new CreateOrderCommand(orderDto);
        var orderId = await Mediator.Send(createOrderCommand);

        // Send create vnpay checkout url command
        var paymentCommand = new CreatePaymentUrlCommand(orderId);
        var url = await Mediator.Send(paymentCommand);

        NavigationManager.NavigateTo(url);
    }

    
}
