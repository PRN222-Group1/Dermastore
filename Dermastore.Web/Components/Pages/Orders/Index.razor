@page "/orders"
@using Dermastore.Application.DTOs.Orders
@using Dermastore.Application.Queries.Orders.GetOrderById
@using Dermastore.Domain.Entities.OrderAggregate
@using MediatR
@inject IMediator Mediator
@inject NavigationManager NavigationManager

@* 
  Ví dụ Razor Component cho giỏ hàng, mô phỏng giao diện giống ảnh minh hoạ.
  Tuỳ chỉnh lại CSS, class, và logic cho phù hợp với dự án thực tế của bạn.
*@

<h2>Your cart</h2>

<div class="row">
    <!-- Cột bên trái: Danh sách sản phẩm trong giỏ -->
    <div class="col-lg-8">
        <div class="card p-3 mb-4">
            <h5 class="mb-3">Your cart</h5>
            @if (order != null && order.OrderItems != null)
            {
                @foreach (var item in order.OrderItems)
                {
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <!-- Ảnh sản phẩm (nếu có) -->
                        <img src="@item.ItemOrdered.ImageUrl" alt="@item.ItemOrdered.ProductName" style="width: 80px; height: 80px; object-fit: cover;" />

                        <!-- Tên sản phẩm và giá -->
                        <div class="ms-3 flex-grow-1">
                            <strong>@item.ItemOrdered.ProductName</strong>
                            <p class="mb-0 text-muted">@item.Price.ToString("C")</p>
                        </div>

                        <!-- Bộ đếm số lượng -->
                        <div class="input-group" style="width:120px">
                            <button class="btn btn-outline-secondary" @onclick="() => DecreaseQuantity(item)">-</button>
                            <input class="form-control text-center" type="number" min="1" @bind="item.Quantity" />
                            <button class="btn btn-outline-secondary" @onclick="() => IncreaseQuantity(item)">+</button>
                        </div>

                        <!-- Tổng giá cho sản phẩm này -->
                        <div class="ms-3" style="width:80px; text-align:right">
                            @((item.Price * item.Quantity).ToString("C"))
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Your cart is empty.</p>
            }
        </div>

        <!-- Shipping thông tin -->
        <div class="card p-3 mb-4">
            <h5 class="mb-3">Shipping</h5>
            <div class="row mb-3">
                <div class="col-sm-6">
                    <label class="form-label">Họ và tên</label>
                    <input class="form-control" @bind="ShippingInfo.FullName" />
                </div>
                <div class="col-sm-6">
                    <label class="form-label">Số điện thoại</label>
                    <input class="form-control" @bind="ShippingInfo.PhoneNumber" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-6">
                    <label class="form-label">Email</label>
                    <input class="form-control" @bind="ShippingInfo.Email" />
                </div>
                <div class="col-sm-6">
                    <label class="form-label">Địa chỉ</label>
                    <input class="form-control" @bind="ShippingInfo.Address" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-6">
                    <label class="form-label">Tỉnh/Thành</label>
                    <select class="form-select" @bind="ShippingInfo.Province">
                        <option value="">--Chọn tỉnh--</option>
                        <option>Hà Nội</option>
                        <option>TP Hồ Chí Minh</option>
                        <option>Đà Nẵng</option>
                        <!-- ... -->
                    </select>
                </div>
                <div class="col-sm-6">
                    <label class="form-label">Shipping type</label>
                    <select class="form-select" @bind="ShippingInfo.ShippingType">
                        <option value="Fast">Fast</option>
                        <option value="Normal">Normal</option>
                        <option value="Economy">Economy</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Payment method -->
        <div class="card p-3 mb-4">
            <h5 class="mb-3">Payment method</h5>
            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="paymentMethod" id="momo" @onclick="() => SelectedPaymentMethod = PaymentMethod.MoMo" checked="@(SelectedPaymentMethod == PaymentMethod.MoMo)" />
                <label class="form-check-label" for="momo">
                    Thanh toán qua Momo
                </label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="paymentMethod" id="zalopay" @onclick="() => SelectedPaymentMethod = PaymentMethod.ZaloPay" checked="@(SelectedPaymentMethod == PaymentMethod.ZaloPay)" />
                <label class="form-check-label" for="zalopay">
                    Thanh toán qua ZaloPay
                </label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="paymentMethod" id="atm" @onclick="() => SelectedPaymentMethod = PaymentMethod.ATM" checked="@(SelectedPaymentMethod == PaymentMethod.ATM)" />
                <label class="form-check-label" for="atm">
                    Thẻ ngân hàng nội địa / Visa / MasterCard
                </label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="paymentMethod" id="vnpay" @onclick="() => SelectedPaymentMethod = PaymentMethod.VnPay" checked="@(SelectedPaymentMethod == PaymentMethod.VnPay)" />
                <label class="form-check-label" for="vnpay">
                    Ví điện tử VNPAY
                </label>
            </div>
        </div>

    </div>

    <!-- Cột bên phải: Tóm tắt đơn hàng -->
    <div class="col-lg-4">
        <div class="card p-3 mb-4">
            <h5>Order Summary</h5>
            <div class="d-flex justify-content-between">
                <span>Subtotal</span>
                <strong>@SubTotal.ToString("C")</strong>
            </div>
            <div class="d-flex justify-content-between">
                <span>Discount (20%)</span>
                <strong>-@Discount.ToString("C")</strong>
            </div>
            <div class="d-flex justify-content-between">
                <span>Delivery Fee</span>
                <strong>@DeliveryFee.ToString("C")</strong>
            </div>
            <hr />
            <div class="d-flex justify-content-between">
                <span>Total</span>
                <strong>@Total.ToString("C")</strong>
            </div>

            <div class="mt-3">
                <button class="btn btn-primary" @onclick="GoToCheckout">
                    Go to Checkout
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int orderId { get; set; }

    private OrderDto order;

    protected override async Task OnInitializedAsync()
    {
        if (orderId > 0)
        {
            var query = new GetOrderQuery(orderId);
            order = await Mediator.Send(query);
        }
        else
        {
            // If no valid orderId, you might want to create a new order or show an error
            Console.WriteLine("Invalid Order ID");
        }
    }
    // Ví dụ data
    public List<CartItemDto> CartItems { get; set; } = new List<CartItemDto>
    {
        new CartItemDto { ProductName = "Toner", Price = 145, Quantity = 1, ImageUrl="https://picsum.photos/80" },
        new CartItemDto { ProductName = "Toner", Price = 180, Quantity = 2, ImageUrl="https://picsum.photos/80" },
        new CartItemDto { ProductName = "Toner", Price = 240, Quantity = 1, ImageUrl="https://picsum.photos/80" },
    };

    // Shipping info
    public ShippingInfo1 ShippingInfo { get; set; } = new ShippingInfo1
        {
            FullName = "AhnXYZ",
            PhoneNumber = "0123456789",
            Email = "test@domain.com",
            Address = "123 Example St.",
            Province = "Hà Nội",
            ShippingType = "Fast"
        };

    // Payment method
    public PaymentMethod SelectedPaymentMethod { get; set; } = PaymentMethod.VnPay;

    // Tính toán Subtotal, discount, v.v.
    private decimal SubTotal => CartItems.Sum(i => (decimal)(i.Price * i.Quantity));
    private decimal Discount => SubTotal * 0.2m;
    private decimal DeliveryFee => 15m;
    private decimal Total => SubTotal - Discount + DeliveryFee;

    private void DecreaseQuantity(OrderItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            StateHasChanged();
        }
    }

    private void IncreaseQuantity(OrderItem item)
    {
        item.Quantity++;
        StateHasChanged();
    }

   

    // private async Task GoToCheckout()
    // {
    //     Console.WriteLine("GoToCheckout clicked, orderId = " + orderId);
    //     NavigationManager.NavigateTo($"/orders/confirm?orderId={orderId}");
    //     await Task.CompletedTask;
    // }

    private void GoToCheckout()
    {
        NavigationManager.NavigateTo($"/orders/confirm?orderId={orderId}", forceLoad: true);
    }

    // DTO mô phỏng item
    public class CartItemDto
    {
        public string ProductName { get; set; }
        public double Price { get; set; }
        public int Quantity { get; set; }
        public string ImageUrl { get; set; }
    }

    // Thông tin shipping
    public class ShippingInfo1
    {
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Address { get; set; }
        public string Province { get; set; }
        public string ShippingType { get; set; }
    }

    // Enum PaymentMethod
    public enum PaymentMethod
    {
        MoMo,
        ZaloPay,
        ATM,
        VnPay
    }
}
