@page "/products/create"
@using Dermastore.Application.Commands.Products
@using Dermastore.Application.DTOs
@using Dermastore.Application.Queries.Products
@using MediatR
@using Microsoft.EntityFrameworkCore
@using Dermastore.Domain.Entities
@inject NavigationManager NavigationManager
@inject IMediator Mediator

<PageTitle>Create Product</PageTitle>

<div class="container mt-4">
    <div class="card shadow-lg p-4">
        <h2 class="text-center mb-4">Create Product</h2>

        @if (categories is null)
        {
            <p class="text-center text-muted"><em>Loading categories...</em></p>
        }
        else
        {
            <EditForm Model="productDto" OnValidSubmit="AddProduct">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name:</label>
                            <InputText id="name" @bind-Value="productDto.Name" class="form-control" />
                            <ValidationMessage For="() => productDto.Name" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Quantity:</label>
                            <InputNumber id="quantity" @bind-Value="productDto.Quantity" class="form-control" />
                            <ValidationMessage For="() => productDto.Quantity" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="productDto.Description" class="form-control" />
                    <ValidationMessage For="() => productDto.Description" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="imageurl" class="form-label">Image URL:</label>
                    <InputText id="imageurl" @bind-Value="productDto.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => productDto.ImageUrl" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="categoryid" class="form-label">Category:</label>
                    <InputSelect id="categoryid" @bind-Value="productDto.CategoryId" class="form-control">
                        <option value="">Select a category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => productDto.CategoryId" class="text-danger" />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a href="/products" class="btn btn-outline-secondary">Back to List</a>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ProductToAddDto productDto { get; set; } = new();

    private IReadOnlyList<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await Mediator.Send(new GetCategoriesQuery());
    }

    private async Task AddProduct()
    {
        if (productDto == null)
        {
            Console.WriteLine("productDto is NULL!");
            return;
        }

        var command = new CreateProductCommand(productDto);
        var productId = await Mediator.Send(command);
        // NavigationManager.NavigateTo($"/products/details?id={productId}");
    }
}
