@page "/products/create"
@using Dermastore.Application.Commands.Products
@using Dermastore.Application.DTOs
@using Dermastore.Application.Queries.Products
@using MediatR
@inject NavigationManager NavigationManager
@inject IMediator Mediator

<PageTitle>Create Product</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center text-primary">Create Product</h3>
                    <hr />

                    @if (categories is null)
                    {
                        <p class="text-muted text-center">Loading categories...</p>
                    }
                    else
                    {
                        <EditForm method="post" Model="productDto" OnValidSubmit="AddProduct">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label for="name" class="form-label">Product Name:</label>
                                <InputText id="name" @bind-Value="productDto.Name" class="form-control" placeholder="Enter product name" />
                                <ValidationMessage For="() => productDto.Name" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description:</label>
                                <InputTextArea id="description" @bind-Value="productDto.Description" class="form-control" placeholder="Enter product description" />
                                <ValidationMessage For="() => productDto.Description" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="quantity" class="form-label">Quantity:</label>
                                <InputNumber id="quantity" @bind-Value="productDto.Quantity" class="form-control" min="1" placeholder="Enter quantity" />
                                <ValidationMessage For="() => productDto.Quantity" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="imageurl" class="form-label">Image URL:</label>
                                <InputText id="imageurl" @bind-Value="productDto.ImageUrl" class="form-control" placeholder="Enter image URL" />
                                <ValidationMessage For="() => productDto.ImageUrl" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="categoryid" class="form-label">Category:</label>
                                <InputSelect id="categoryid" @bind-Value="productDto.CategoryId" class="form-control">
                                    <option value="">Select a category</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => productDto.CategoryId" class="text-danger" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <a href="/products" class="btn btn-secondary">Back to List</a>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ProductToAddDto productDto { get; set; } = new();

    private IReadOnlyList<CategoryDto>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await Mediator.Send(new GetCategoriesQuery());
    }

    private async Task AddProduct()
    {
        // Create the command using the DTO
        var command = new CreateProductCommand(productDto);

        // Send the command to MediatR to handle it
        var productId = await Mediator.Send(command);

        // Route to detail page
        NavigationManager.NavigateTo($"/products/details?id={productId}");
    }
}
