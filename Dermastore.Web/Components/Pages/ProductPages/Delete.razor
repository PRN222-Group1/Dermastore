@page "/products/delete"
@using Dermastore.Application.Commands.Products
@using Dermastore.Application.Queries.Products
@using Dermastore.Application.DTOs
@using MediatR
@inject NavigationManager NavigationManager
@inject IMediator Mediator

<PageTitle>Delete Product</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body text-center">
                    <h3 class="card-title text-danger">Confirm Delete</h3>
                    <hr />

                    @if (productDto is null)
                    {
                        <p class="text-muted">Loading product...</p>
                    }
                    else
                    {
                        <div class="mb-3">
                            <img src="@productDto.ImageUrl" class="img-fluid rounded" alt="@productDto.Name" style="max-height: 200px;" />
                        </div>
                        <h5>@productDto.Name</h5>
                        <p class="text-muted">@productDto.Description</p>
                        <p><strong>Quantity:</strong> @productDto.Quantity</p>
                        <p><strong>Status:</strong> @productDto.Status</p>

                        <div class="d-flex justify-content-center gap-2 mt-3">
                            <button class="btn btn-danger px-4" @onclick="DeleteProduct">Delete</button>
                            <a href="/products" class="btn btn-secondary px-4">Cancel</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int? Id { get; set; }

    private ProductDto? productDto;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || Id <= 0)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        var query = new GetProductQuery(Id.Value);
        productDto = await Mediator.Send(query);

        if (productDto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProduct()
    {
        if (Id is null || Id <= 0)
        {
            Console.WriteLine("DeleteProduct: Id is null or invalid");
            return;
        }

        Console.WriteLine($"DeleteProduct: Sending delete request for Id = {Id}");

        var command = new DeleteProductCommand(Id.Value);
        var result = await Mediator.Send(command);

        if (!result)
        {
            Console.WriteLine("DeleteProduct: Product not found, navigating to 'notfound'");
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Console.WriteLine("DeleteProduct: Product deleted successfully, navigating to '/products'");
            NavigationManager.NavigateTo("/products");
        }
    }

}
