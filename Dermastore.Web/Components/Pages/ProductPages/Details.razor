@page "/products/details/{Id:int}"
@using Blazored.Toast.Configuration
@using Dermastore.Application.DTOs
@using Dermastore.Application.DTOs.CartDTOs
@using Dermastore.Application.Queries.Products
@using Dermastore.Web.Containers
@using Dermastore.Web.Extensions
@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using Dermastore.Domain.Entities

@rendermode InteractiveServer
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject CartStateContainer CartStateContainer
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>Product Details</PageTitle>

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast"
                SuccessIcon="fa fa-check-circle"
                ErrorClass="error-toast"
                ErrorIcon="fa fa-times-circle"
                InfoClass="info-toast"
                InfoIcon="fa fa-info-circle"
                WarningClass="warning-toast"
                WarningIcon="fa fa-exclamation-circle" />

@if (productDto is null)
{
    <p class="text-muted">Loading...</p>
}
else
{
    <div class="container my-4">
        <div class="row">
            <div class="col-md-6">
                <div class="card shadow-lg p-3 rounded">
                    <img src="@productDto.ImageUrl" class="img-fluid rounded-3" alt="@productDto.Name" style="height: 100%; object-fit: contain;">
                </div>
            </div>
            <div class="col-md-6">
                <div class="card-body">
                    <h2 class="card-title text-primary">@productDto.Name</h2>
                    <p class="text-muted">@productDto.Description</p>
                    <p><strong>Status:</strong> <span class="badge bg-@GetStatusColor(productDto.Status.ToString())">@productDto.Status</span></p>
                    <p><strong>Price:</strong> @string.Format("{0}đ", productDto.Price.ToString("N0"))</p>
                    <p><strong>Quantity:</strong> <span id="quantity">@productDto.Quantity</span></p>
                    <p><strong>Category:</strong> @productDto.SubCategory</p>
                    <p><strong>Brand:</strong> @productDto.Brand</p>

                    <div class="input-group mt-4">
                        <button class="btn btn-outline-secondary" @onclick="DecreaseQuantity">
                            <i class="fa fa-minus"></i>
                        </button>
                        <input type="number" class="form-control text-center" value="@Quantity" readonly style="max-width: 80px;" />
                        <button class="btn btn-outline-secondary" @onclick="IncreaseQuantity">
                            <i class="fa fa-plus"></i>
                        </button>
                    </div>

                    <div class="mt-3">
                        <button class="btn btn-success btn-lg" @onclick="AddToCart">
                            <i class="bi bi-cart-fill"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ProductDto? productDto;
    [Parameter]
    public int Id { get; set; }

    private int Quantity { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetProductQuery(Id);
        productDto = await Mediator.Send(query);

        if (productDto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void IncreaseQuantity()
    {
        Quantity++;
        if (Quantity > productDto.Quantity)
        {
            Quantity = productDto.Quantity;
        }
        StateHasChanged();
    }

    private void DecreaseQuantity()
    {
        if (Quantity > 1)
        {
            Quantity--;
        }
        StateHasChanged();
    }

    private async Task AddToCart()
    {
        if (productDto != null)
        {
            var cart = CartStateContainer.Cart;

            if (cart == null)
            {
                cart = new CartDto();
                await ProtectedLocalStore.SetAsync("cartId", cart.Id);
            }

            // Check if the product is already in the cart
            var existingItem = cart.Items.FirstOrDefault(item => item.ProductId == productDto.Id);

            if (existingItem != null)
            {
                // If the product is already in the cart, increase its quantity
                existingItem.Quantity += Quantity;

                // Ensure the quantity doesn't exceed the available stock
                if (existingItem.Quantity > productDto.Quantity)
                {
                    existingItem.Quantity = productDto.Quantity;
                }
            }
            else
            {
                // If the product is not in the cart, add it as a new item
                var cartItem = new CartItemDto
                    {
                        ProductId = productDto.Id,
                        ProductName = productDto.Name,
                        Quantity = Quantity,
                        Price = productDto.Price,
                        ImageUrl = productDto.ImageUrl
                    };

                cart.Items.Add(cartItem);
            }

            // Update the cart and save cart id to local storage
            await CartStateContainer.UpdateCartAsync(cart);

            ToastService.ShowSuccess("Added product to cart");
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "InStock" => "success",
            "OutOfStock" => "danger",
            _ => "secondary"
        };
    }
}
