@page "/products/details/{Id:int}"
@using Blazored.Toast.Configuration
@using Dermastore.Application.DTOs
@using Dermastore.Application.DTOs.CartDTOs
@using Dermastore.Application.Queries.Products
@using Dermastore.Web.Containers
@using Dermastore.Web.Extensions
@using Dermastore.Web.Utils
@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using Dermastore.Domain.Entities

@rendermode InteractiveServer
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject CartStateContainer CartStateContainer
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>@(productDto?.Name ?? "Product Details") | Dermastore</PageTitle>

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast"
                SuccessIcon="fa fa-check-circle"
                ErrorClass="error-toast"
                ErrorIcon="fa fa-times-circle"
                InfoClass="info-toast"
                InfoIcon="fa fa-info-circle"
                WarningClass="warning-toast"
                WarningIcon="fa fa-exclamation-circle" />

@if (productDto is null)
{
    <div class="container min-vh-75 d-flex justify-content-center align-items-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container my-5">
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Home</a></li>
                <li class="breadcrumb-item"><a href="/products" class="text-decoration-none">Products</a></li>
                <li class="breadcrumb-item active" aria-current="page">@productDto.Name</li>
            </ol>
        </nav>

        <div class="row g-4">
            <div class="col-lg-6 mb-4 mb-lg-0">
                <div class="position-sticky" style="top: 2rem;">
                    <div class="card border-0 shadow-lg rounded-4 overflow-hidden">
                        <div class="product-image-wrapper p-4 bg-light" style="height: 400px; display: flex; align-items: center; justify-content: center;">
                            <img src="@productDto.ImageUrl" class="img-fluid product-image" alt="@productDto.Name"
                                 style="max-height: 100%; max-width: 100%; object-fit: contain; transition: transform 0.3s ease;">
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card border-0 shadow-sm rounded-4 p-4">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h1 class="product-title fw-bold text-primary mb-0">@productDto.Name</h1>
                        <span class="badge bg-@GetStatusColor(productDto.Status.ToString()) rounded-pill fs-6 px-3 py-2">
                            @(productDto.Status.ToString() == "InStock" ? "In Stock" : "Out of Stock")
                        </span>
                    </div>

                    <div class="d-flex align-items-center mb-3">
                        <span class="fs-4 fw-bold text-success me-2">@PriceFormatter.FormatPrice(productDto.Price)</span>
                    </div>

                    <div class="mb-4">
                        <p class="text-muted fs-5 lh-base">@productDto.Description</p>
                    </div>

                    <div class="product-details my-4">
                        <div class="row g-3">
                            <div class="col-6">
                                <div class="detail-item p-3 bg-light rounded-3">
                                    <span class="detail-label fs-6 text-muted">Category</span>
                                    <p class="detail-value mb-0 fs-5 fw-medium">@productDto.SubCategory</p>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="detail-item p-3 bg-light rounded-3">
                                    <span class="detail-label fs-6 text-muted">Brand</span>
                                    <p class="detail-value mb-0 fs-5 fw-medium">@productDto.Brand</p>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="detail-item p-3 bg-light rounded-3">
                                    <span class="detail-label fs-6 text-muted">Available Quantity</span>
                                    <p class="detail-value mb-0 fs-5 fw-medium">@productDto.Quantity</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="input-group mt-4">
                        <label class="form-label fw-medium">Quantity</label>
                        <div class="input-group quantity-selector d-flex align-items-center">
                            <button class="btn btn-primary" @onclick="DecreaseQuantity">
                                <i class="fa fa-minus"></i>
                            </button>
                            <input type="number" class="form-control text-center bg-white border-0 pe-0" value="@Quantity" readonly style="max-width: 50px;" />
                            <button class="btn btn-primary" @onclick="IncreaseQuantity">
                                <i class="fa fa-plus"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mt-4">
                        <button class="btn btn-primary btn-lg w-100 py-3 rounded-3 d-flex align-items-center justify-content-center"
                                @onclick="AddToCart"
                                disabled="@(productDto.Status.ToString() != "InStock")">
                            <i class="bi bi-cart-plus me-2"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .product-image:hover {
        transform: scale(1.05);
    }

    .quantity-selector .btn {
        height: 38px;
        width: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Toast styles */
    .success-toast {
        background-color: #d4edda !important;
        color: #155724 !important;
        border-color: #c3e6cb !important;
    }

    .error-toast {
        background-color: #f8d7da !important;
        color: #721c24 !important;
        border-color: #f5c6cb !important;
    }
</style>

@code {
    private ProductDto? productDto;
    [Parameter]
    public int Id { get; set; }

    private int Quantity { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetProductQuery(Id);
        productDto = await Mediator.Send(query);

        if (productDto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void IncreaseQuantity()
    {
        if (productDto != null && Quantity < productDto.Quantity)
        {
            Quantity++;
        }
        StateHasChanged();
    }

    private void DecreaseQuantity()
    {
        if (Quantity > 1)
        {
            Quantity--;
        }
        StateHasChanged();
    }

    private async Task AddToCart()
    {
        if (productDto != null && productDto.Status.ToString() == "InStock")
        {
            var cart = CartStateContainer.Cart;

            if (cart == null)
            {
                cart = new CartDto();
                await ProtectedLocalStore.SetAsync("cartId", cart.Id);
            }

            // Check if the product is already in the cart
            var existingItem = cart.Items.FirstOrDefault(item => item.ProductId == productDto.Id);

            if (existingItem != null)
            {
                // If the product is already in the cart, increase its quantity
                existingItem.Quantity += Quantity;

                // Ensure the quantity doesn't exceed the available stock
                if (existingItem.Quantity > productDto.Quantity)
                {
                    existingItem.Quantity = productDto.Quantity;
                }
            }
            else
            {
                // If the product is not in the cart, add it as a new item
                var cartItem = new CartItemDto
                    {
                        ProductId = productDto.Id,
                        ProductName = productDto.Name,
                        Quantity = Quantity,
                        Price = productDto.Price,
                        ImageUrl = productDto.ImageUrl
                    };

                cart.Items.Add(cartItem);
            }

            // Update the cart and save cart id to local storage
            await CartStateContainer.UpdateCartAsync(cart);

            ToastService.ShowSuccess($"{productDto.Name} added to your cart");

            // Reset quantity after adding to cart
            Quantity = 1;
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "InStock" => "success",
            "OutOfStock" => "danger",
            _ => "secondary"
        };
    }
}