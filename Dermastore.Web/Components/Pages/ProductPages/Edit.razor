@page "/products/edit"
@using Dermastore.Application.Commands.Products
@using Dermastore.Application.DTOs
@using Dermastore.Application.Extensions
@using Dermastore.Application.Queries.Products
@using Dermastore.Domain.Entities
@using MediatR
@using Dermastore.Domain.Interfaces
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IProductService ProductService
@inject IServiceScopeFactory ServiceScopeFactory

<PageTitle>Chỉnh sửa sản phẩm</PageTitle>

<h1 class="mb-4">Chỉnh sửa sản phẩm</h1>
<div class="card shadow-sm p-4">
    <div class="row">
        <div class="col-md-5">
            <img src="@productDto.ImageUrl" class="img-fluid rounded" alt="@productDto.Name" style="max-height: 300px; object-fit: cover;">
        </div>
        <div class="col-md-7">
            <EditForm method="post" Model="productDto" OnValidSubmit="UpdateProduct" FormName="EditProduct" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <InputNumber type="hidden" @bind-Value="productDto.Id" class="form-control" />

                <div class="mb-3">
                    <label for="name" class="form-label">Tên sản phẩm:</label>
                    <InputText id="name" @bind-Value="productDto.Name" class="form-control" />
                    <ValidationMessage For="() => productDto.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Mô tả:</label>
                    <InputTextArea id="description" @bind-Value="productDto.Description" class="form-control" />
                    <ValidationMessage For="() => productDto.Description" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="quantity" class="form-label">Số lượng:</label>
                    <InputNumber id="quantity" @bind-Value="productDto.Quantity" class="form-control" />
                    <ValidationMessage For="() => productDto.Quantity" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="imageurl" class="form-label">Ảnh sản phẩm (URL):</label>
                    <InputText id="imageurl" @bind-Value="productDto.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => productDto.ImageUrl" class="text-danger" />
                </div>

                @if (categories != null){          
                    <div class="mb-3">
                        <label for="categoryid" class="form-label">Danh mục:</label>
                        <InputSelect id="categoryid" @bind-Value="productDto.CategoryId" class="form-control">
                            <option value="">Chọn danh mục</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => productDto.CategoryId" class="text-danger" />
                    </div>
                }


                <div class="d-flex justify-content-between">
                    <a href="/products" class="btn btn-outline-secondary">Quay lại</a>
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private ProductToUpdateDto productDto { get; set; } = new();
    private IReadOnlyList<CategoryDto>? categories;

    protected override async Task OnInitializedAsync()
    {
        if (productDto != null && productDto.Id == Id) return;

        try
        {
            var prodQuery = new GetProductQuery(Id);
            var product = await Mediator.Send(prodQuery);
            if (product == null)
            {
                NavigationManager.NavigateTo("/products");
                return;
            }

            productDto = new ProductToUpdateDto
                {
                    Id = product.Id,
                    Name = product.Name ?? string.Empty,
                    Description = product.Description ?? string.Empty,
                    Quantity = product.Quantity,
                    ImageUrl = product.ImageUrl ?? string.Empty,
                    CategoryId = product.CategoryId
                };

            var catQuery = new GetCategoriesQuery();
            categories = await Mediator.Send(catQuery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task UpdateProduct()
    {
        var command = new UpdateProductCommand(productDto);
        var productId = await Mediator.Send(command);

        NavigationManager.NavigateTo($"/products/details?id={productId}");
    }
}
