@page "/products"
@using Dermastore.Application.DTOs
@using Dermastore.Application.Queries.Products
@using Dermastore.Domain.Specifications.Products
@using MediatR
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Dermastore.Domain.Entities
@inject IMediator Mediator

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="products/create">Create New</a>
</p>

@if (products != null && products.Any())
{
    <QuickGrid Class="table" Items="products.AsQueryable()" TGridItem="ProductDto">
        <PropertyColumn Property="product => product.Name" />
        <PropertyColumn Property="product => product.Description" />
        <PropertyColumn Property="product => product.Status" />
        <PropertyColumn Property="product => product.Quantity" />
        <PropertyColumn Property="product => product.ImageUrl" />
        <PropertyColumn Property="product => product.Category" />

        <TemplateColumn Context="product">
            <a href="@($"products/edit?id={product.Id}")">Edit</a> |
            <a href="@($"products/details?id={product.Id}")">Details</a> |
            <a href="@($"products/delete?id={product.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <p>Loading products...</p>
}

@code {
    private IReadOnlyList<ProductDto> products;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetProductsQuery();
        products = await Mediator.Send(query);
        var jv = 1;
    }
}
