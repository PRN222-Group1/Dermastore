@page "/manage-promotion"
@using MediatR
@using Dermastore.Application.Queries.Promotions
@using Dermastore.Application.Commands.Promotion
@using Dermastore.Application.DTOs
@using Dermastore.Domain.Specifications.Promotions
@using Dermastore.Domain.Enums
@rendermode InteractiveServer
@inject IMediator Mediator

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-primary" @onclick="ShowCreatePromotionModal">Create Promotion</button>
        <div class="input-group" style="max-width: 300px;">
            <input type="text" class="form-control" placeholder="Search by promotion name" @bind="SearchTerm" @oninput="OnSearchTermChanged" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchPromotions">Search</button>
        </div>
    </div>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Promotion ID</th>
                <th>Name</th>
                <th>Effective Date</th>
                <th>Expiry Date</th>
                <th>Discount</th>
                <th>Code</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in promotions)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Name</td>
                    <td>@p.EffectiveDate.ToString("yyyy-MM-dd")</td>
                    <td>@p.ExpiryDate.ToString("yyyy-MM-dd")</td>
                    <td>@p.Discount</td>
                    <td>@p.Code</td>
                    <td>@p.Status</td>
                    <td>
                        <div>
                            <button class="btn btn-primary btn-sm me-1" @onclick="() => ShowUpdatePromotionModal(p)">
                                Update
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeletePromotion(p.Id)">
                                Delete
                            </button>
                        </div>
                    </td>
                </tr>
                @if (ErrorMessages.ContainsKey(p.Id) && !string.IsNullOrEmpty(ErrorMessages[p.Id]))
                {
                    <tr>
                        <td colspan="8">
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @ErrorMessages[p.Id]
                                <button type="button" class="btn-close" aria-label="Close"
                                        @onclick="() => ClearErrorMessage(p.Id)"></button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <p>Showing @((PageIndex - 1) * PageSize + 1) to @(Math.Min(PageIndex * PageSize, TotalItems)) of @TotalItems promotions</p>
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(PageIndex == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage" disabled="@(PageIndex == 1)">Previous</button>
                </li>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    var pageNum = i;
                    <li class="page-item @(PageIndex == pageNum ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNum)">@pageNum</button>
                    </li>
                }
                <li class="page-item @(PageIndex == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage" disabled="@(PageIndex == TotalPages)">Next</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Modal: Create/Update Promotion -->
@if (ShowPromotionModal)
{
    <div class="modal show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@PromotionModalTitle</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePromotionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="promotionName" class="form-label">Promotion Name</label>
                        <input id="promotionName" class="form-control" @bind="TempPromotion.Name" />
                    </div>
                    <div class="mb-3">
                        <label for="effectiveDate" class="form-label">Effective Date</label>
                        <input id="effectiveDate" type="date" class="form-control" @bind="TempPromotion.EffectiveDate" />
                    </div>
                    <div class="mb-3">
                        <label for="expiryDate" class="form-label">Expiry Date</label>
                        <input id="expiryDate" type="date" class="form-control" @bind="TempPromotion.ExpiryDate" />
                    </div>
                    <div class="mb-3">
                        <label for="discount" class="form-label">Discount</label>
                        <input id="discount" type="number" step="0.01" class="form-control" @bind="TempPromotion.Discount" min="0" />
                    </div>
                    <div class="mb-3">
                        <label for="code" class="form-label">Code</label>
                        <input id="code" class="form-control" @bind="TempPromotion.Code" />
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <select id="status" class="form-control" @bind="TempPromotion.Status">
                            <option value="@PromotionStatus.Active.ToString()">Active</option>
                            <option value="@PromotionStatus.Expired.ToString()">Expired</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePromotionModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SavePromotion">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Custom CSS -->
<style>
    .custom-select {
        appearance: none;
        background: #fff url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='5' viewBox='0 0 10 5'><path fill='%23333' d='M0 0h10L5 5z'/></svg>") no-repeat right 10px center;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 10px 35px 10px 15px;
        font-size: 16px;
        color: #333;
        width: 100%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        .custom-select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            outline: none;
        }

        .custom-select:hover {
            border-color: #86b7fe;
        }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .form-control, .form-control:focus {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    select.form-control {
        appearance: none;
        background: #fff url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='5' viewBox='0 0 10 5'><path fill='%23333' d='M0 0h10L5 5z'/></svg>") no-repeat right 10px center;
        padding-right: 35px;
    }

    .pagination {
        margin-bottom: 0;
    }

    .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .page-link {
        cursor: pointer;
    }
</style>

@code {
    private IReadOnlyList<PromotionDto> promotions = new List<PromotionDto>();
    private bool ShowPromotionModal = false;
    private string PromotionModalTitle = "";
    private PromotionDto TempPromotion = new() { Name = "" }; // Required property initialized
    private Dictionary<int, string> ErrorMessages = new();

    // Pagination properties
    private int PageIndex = 1;
    private int PageSize = 10;
    private int TotalItems = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    // Search property
    private string SearchTerm { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var spec = new PromotionSpecParams
            {
                PageIndex = PageIndex,
                PageSize = PageSize,
                Search = SearchTerm
            };
        var query = new GetPromotionsWithSpecQuery(spec);
        promotions = await Mediator.Send(query);

        TotalItems = await GetTotalPromotionCount();
    }

    private async Task<int> GetTotalPromotionCount()
    {
        var spec = new PromotionSpecParams
            {
                Search = SearchTerm
            };
        var query = new CountPromotionsQuery(spec);
        var numOfPromotions = await Mediator.Send(query);
        return numOfPromotions;
    }

    private void ShowCreatePromotionModal()
    {
        PromotionModalTitle = "Create Promotion";
        TempPromotion = new PromotionDto
            {
                Name = "",
                EffectiveDate = DateOnly.FromDateTime(DateTime.Today),
                ExpiryDate = DateOnly.FromDateTime(DateTime.Today.AddDays(30)),
                Discount = 0,
                Status = "Active"
            };
        ShowPromotionModal = true;
    }

    private void ShowUpdatePromotionModal(PromotionDto promotion)
    {
        PromotionModalTitle = "Update Promotion";
        TempPromotion = new PromotionDto
            {
                Id = promotion.Id,
                Name = promotion.Name,
                EffectiveDate = promotion.EffectiveDate,
                ExpiryDate = promotion.ExpiryDate,
                Discount = promotion.Discount,
                Code = promotion.Code,
                Status = promotion.Status
            };
        ShowPromotionModal = true;
    }

    private async Task SavePromotion()
    {
        try
        {
            if (TempPromotion.Id != 0) // Update validation
            {
                if (string.IsNullOrEmpty(TempPromotion.Name) ||
                    TempPromotion.EffectiveDate == default ||
                    TempPromotion.ExpiryDate == default ||
                    TempPromotion.Discount < 0 ||
                    string.IsNullOrEmpty(TempPromotion.Status) ||
                     string.IsNullOrEmpty(TempPromotion.Code))
                {
                    ErrorMessages[TempPromotion.Id] = "All required fields must be filled, and discount must be non-negative.";
                    return;
                }
            }
            else // Create validation
            {
                if (string.IsNullOrEmpty(TempPromotion.Name) ||
                    TempPromotion.EffectiveDate == default ||
                    TempPromotion.ExpiryDate == default ||
                    TempPromotion.Discount < 0)
                {
                    ErrorMessages[0] = "Name, Effective Date, Expiry Date, and non-negative Discount are required.";
                    return;
                }
            }

            if (TempPromotion.Id == 0) // Create
            {
                var command = new CreatePromotionCommand(TempPromotion);
                await Mediator.Send(command);
            }
            else // Update
            {
                var command = new UpdatePromotionCommand(TempPromotion);
                await Mediator.Send(command);
            }

            await LoadData();
            ClosePromotionModal();
        }
        catch (Exception ex)
        {
            ErrorMessages[TempPromotion.Id] = $"Save failed: {ex.Message}";
        }
    }

    private async Task DeletePromotion(int promotionId)
    {
        try
        {
            var command = new DeletePromotionCommand(promotionId);
            await Mediator.Send(command);
            await LoadData();
            ErrorMessages.Remove(promotionId);
        }
        catch (Exception ex)
        {
            ErrorMessages[promotionId] = $"Delete failed: {ex.Message}";
        }
    }

    private void ClosePromotionModal()
    {
        ShowPromotionModal = false;
    }

    private void ClearErrorMessage(int promotionId)
    {
        ErrorMessages.Remove(promotionId);
    }

    // Pagination methods
    private async Task PreviousPage()
    {
        if (PageIndex > 1)
        {
            PageIndex--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (PageIndex < TotalPages)
        {
            PageIndex++;
            await LoadData();
        }
    }

    private async Task GoToPage(int page)
    {
        PageIndex = page;
        await LoadData();
    }

    // Search methods
    private async Task SearchPromotions()
    {
        PageIndex = 1; // Reset to first page on new search
        await LoadData();
    }

    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        await SearchPromotions();
    }
}