@page "/manage-quiz-2"
@using System.Linq
@using MediatR
@using Dermastore.Application.Queries.Questions
@using Dermastore.Application.DTOs.QuestionDTOs
@using Dermastore.Application.Queries.Answers
@using Dermastore.Application.DTOs.AnswerDTOs
@using Dermastore.Application.Queries.QuizResults
@using Dermastore.Application.DTOs.QuizResultDTOs
@using Dermastore.Application.Commands.Answers
@using Dermastore.Application.Commands.QuizResults
@using Dermastore.Application.Commands.Questions
@rendermode InteractiveServer
@inject IMediator Mediator

<!-- For quick demonstration, we place the styles here in a <style> block. -->
<style>
    .modal-backdrop {
    /* Ensure modals have a backdrop. This is a minimal demonstration. */
    opacity: 0.5;
    }

    .tab-content > .table {
    margin-top: 1rem;
    }

    /* Example custom color for the Update button */
    .btn-update {
    background-color: #0d6efd; /* You can use #588157 if you want the greenish color you mentioned */
    color: white;
    border: none;
    }

    .btn-update:hover {
    background-color: #0b5ed7;
    }

    /* Example custom color for the Create button */
    .btn-create {
    background-color: #588157;
    color: white;
    border: none;
    }

    .btn-create:hover {
    background-color: #4a6b48;
    }
</style>

<h2>Manage Quiz</h2>

<!-- Nav tabs -->
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link @(ActiveTab == 1 ? "active" : "")"

        @onclick="() => SetActiveTab(1)">
            Manage Questions
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(ActiveTab == 2 ? "active" : "")"

        @onclick="() => SetActiveTab(2)">
            Manage Answers
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(ActiveTab == 3 ? "active" : "")"

        @onclick="() => SetActiveTab(3)">
            Manage Results
        </a>
    </li>
</ul>

<!-- Tab content -->
<div class="tab-content p-3">

    @if (ActiveTab == 1)
    {
        <!-- Manage Questions -->
        <div>
            <button class="btn btn-create mb-2" @onclick="ShowCreateQuestionModal">Create Question</button>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Question ID</th>
                        <th>Question Content</th>
                        <th>Answers</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var q in questionDtos)
                    {
                        <tr>
                            <td>@q.id</td>
                            <td>@q.content</td>
                            <td>
                                <!-- "View detail" button to show a modal listing all answers for this question -->
                                <button class="btn btn-sm btn-info"
                                @onclick="() => ShowViewAnswersModal(q)">
                                    View Detail
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-update btn-sm me-1"
                                @onclick="() => ShowUpdateQuestionModal(q)">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                @onclick="() => DeleteQuestion(q.id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (ActiveTab == 2)
    {
        <!-- Manage Answers -->
        <div>
            <button class="btn btn-create mb-2" @onclick="ShowCreateAnswerModal">Create Answer</button>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Answer ID</th>
                        <th>Answer Content</th>
                        <th>Question ID</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in answerDtos)
                    {
                        <tr>
                            <td>@a.id</td>
                            <td>@a.content</td>
                            <td>@a.questionId</td>
                            <td>
                                <button class="btn btn-update btn-sm me-1"
                                @onclick="() => ShowUpdateAnswerModal(a)">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                @onclick="() => DeleteAnswer(a.id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (ActiveTab == 3)
    {
        <!-- Manage Results -->
        <div>
            <button class="btn btn-create mb-2" @onclick="ShowCreateResultModal">Create Result</button>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Result ID</th>
                        <th>Skin Type</th>
                        <th>Skin Description</th>
                        <th>Characteristic</th>
                        <th>Care Tips</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in quizResultResponseDtos)
                    {
                        <tr>
                            <td>@r.quizId</td>
                            <td>@r.skinType</td>
                            <td>@r.description</td>
                            <td>@r.characteristic</td>
                            <td>@r.careTips</td>
                            <td>
                                <button class="btn btn-update btn-sm me-1"
                                @onclick="() => ShowUpdateResultModal(r)">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                @onclick="() => DeleteResult(r.quizId)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- ====================== Modals ======================= -->
<!-- Modal: Create/Update Question -->
@if (ShowQuestionModal)
{
    <div class="modal show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@QuestionModalTitle</h5>
                    <button type="button" class="btn-close" aria-label="Close"
                    @onclick="CloseQuestionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="questionContent" class="form-label">Question Content</label>
                        <input id="questionContent" class="form-control"
                        @bind="TempQuestion.content" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseQuestionModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveQuestion">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Transparent backdrop -->
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal: View Answers for a question -->
@if (ShowViewAnswers)
{
    <div class="modal show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Answers for Question ID @ViewAnswersQuestionId</h5>
                    <button type="button" class="btn-close" aria-label="Close"
                    @onclick="CloseViewAnswersModal"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Answer ID</th>
                                <th>Answer Content</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ViewAnswersList != null)
                            {
                                @foreach (var ans in ViewAnswersList)
                                {
                                    <tr>
                                        <td>@ans.id</td>
                                        <td>@ans.content</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseViewAnswersModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal: Create/Update Answer -->
@if (ShowAnswerModal)
{
    <div class="modal show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@AnswerModalTitle</h5>
                    <button type="button" class="btn-close" aria-label="Close"
                    @onclick="CloseAnswerModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="answerContent" class="form-label">Answer Content</label>
                        <input id="answerContent" class="form-control"
                        @bind="TempAnswer.content" />
                    </div>
                    <div class="mb-3">
                        <label for="answerQuestionId" class="form-label">Question ID</label>
                        <input id="answerQuestionId" class="form-control"
                        type="number"
                        @bind="TempAnswer.questionId" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAnswerModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveAnswer">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal: Create/Update Result -->
@if (ShowResultModal)
{
    <div class="modal show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ResultModalTitle</h5>
                    <button type="button" class="btn-close" aria-label="Close"
                    @onclick="CloseResultModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label class="form-label">Skin Type</label>
                        <input class="form-control" @bind="TempResult.skinType" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Skin Description</label>
                        <input class="form-control" @bind="TempResult.description" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Characteristic</label>
                        <input class="form-control" @bind="TempResult.characteristic" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Care Tips</label>
                        <input class="form-control" @bind="TempResult.careTips" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseResultModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveResult">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    // ------------------ State Fields ---------------------
    private int ActiveTab = 1;
    private IReadOnlyList<QuestionDto> questionDtos;
    private IReadOnlyList<AnswerDto> answerDtos;
    private IReadOnlyList<QuizResultResponseDto> quizResultResponseDtos;

    // For question create/update
    private bool ShowQuestionModal = false;
    private string QuestionModalTitle = "";
    private QuestionDto TempQuestion = new();

    // For viewing question answers
    private bool ShowViewAnswers = false;
    private int ViewAnswersQuestionId = 0;
    private List<AnswerDto> ViewAnswersList = new();

    // For answer create/update
    private bool ShowAnswerModal = false;
    private string AnswerModalTitle = "";
    private AnswerDto TempAnswer = new();

    // For result create/update
    private bool ShowResultModal = false;
    private string ResultModalTitle = "";
    private QuizResultResponseDto TempResult = new();

    protected override async void OnInitialized()
    {

        var questionQuery = new GetQuestionsQuery();
        questionDtos = await Mediator.Send(questionQuery);

        var answerQuery = new GetAllAnswersQuery();
        answerDtos = await Mediator.Send(answerQuery);

        var quizQuery = new GetAllQuizResultQueury();
        quizResultResponseDtos = await Mediator.Send(quizQuery);
    }

    // ------------------ Tab Logic ---------------------
    private void SetActiveTab(int tabIndex)
    {
        ActiveTab = tabIndex;
    }

    // ------------------ Manage Questions Methods ---------------------
    private void ShowCreateQuestionModal()
    {
        QuestionModalTitle = "Create Question";
        TempQuestion = new QuestionDto();
        ShowQuestionModal = true;
    }

    private void ShowUpdateQuestionModal(QuestionDto q)
    {
        QuestionModalTitle = "Update Question";
        // Create a copy so we don't modify original until Save
        TempQuestion = new QuestionDto
            {
                id = q.id,
                content = q.content
            };
        ShowQuestionModal = true;
    }

    private void SaveQuestion()
    {
        // if (TempQuestion.id == 0)
        // {
        //     var questionToUpdateDto = new QuestionToUpdateDTO
        //     {
                
        //     };
        // }
        // else
        // {
        //     var existing = Questions.FirstOrDefault(x => x.Id == TempQuestion.Id);
        //     if (existing != null)
        //     {
        //         existing.Content = TempQuestion.Content;
        //     }
        // }

        // CloseQuestionModal();
    }

    private async void DeleteQuestion(int id)
    {
        var deleteQuestionCommand = new DeleteQuestionCommand(id);
        await Mediator.Send(deleteQuestionCommand);
    }

    private void CloseQuestionModal()
    {
        ShowQuestionModal = false;
    }

    // For viewing question’s answers
    private void ShowViewAnswersModal(QuestionDto question)
    {
        ViewAnswersQuestionId = question.id;
        ViewAnswersList = question.answers;
        ShowViewAnswers = true;
    }

    private void CloseViewAnswersModal()
    {
        ShowViewAnswers = false;
        ViewAnswersList = new();
        ViewAnswersQuestionId = 0;
    }

    // ------------------ Manage Answers Methods ---------------------
    private void ShowCreateAnswerModal()
    {
        AnswerModalTitle = "Create Answer";
        TempAnswer = new AnswerDto(); // empty
        ShowAnswerModal = true;
    }

    private void ShowUpdateAnswerModal(AnswerDto ans)
    {
        AnswerModalTitle = "Update Answer";
        TempAnswer = new AnswerDto
            {
                id = ans.id,
                content = ans.content,
                questionId = ans.questionId
            };
        ShowAnswerModal = true;
    }

    private async Task SaveAnswer()
    {
        if (TempAnswer.id == 0)
        {
            var answerToCreate = new AnswerToAddDto
                {
                    content = TempAnswer.content,
                    questionId = TempAnswer.questionId
                };
            var command = new CreateAnswerCommand(answerToCreate);
            var result = await Mediator.Send(command);
        }
        else
        {
            var answerToUpdate = new AnswerToUpdateDto
                {
                    answerId = TempAnswer.id,
                    content = TempAnswer.content,
                    questionId = TempAnswer.questionId
                };
            var command = new UpdateAnswerCommand(answerToUpdate);
            var updateResult = await Mediator.Send(command);
        }
        CloseAnswerModal();
    }

    private void DeleteAnswer(int id)
    {
        // var ans = answe.FirstOrDefault(x => x.Id == id);
        // if (ans != null)
        // {
        //     Answers.Remove(ans);
        //     var q = Questions.FirstOrDefault(x => x.Id == ans.QuestionId);
        //     q?.Answers.RemoveAll(a => a.Id == id);
        // }
    }

    private void CloseAnswerModal()
    {
        ShowAnswerModal = false;
    }

    // ------------------ Manage Results Methods ---------------------
    private void ShowCreateResultModal()
    {
        ResultModalTitle = "Create Result";
        TempResult = new QuizResultResponseDto();
        ShowResultModal = true;
    }

    private void ShowUpdateResultModal(QuizResultResponseDto r)
    {
        ResultModalTitle = "Update Result";
        TempResult = new QuizResultResponseDto
            {
                quizId = r.quizId,
                skinType = r.skinType,
                description = r.description,
                characteristic = r.characteristic,
                careTips = r.careTips
            };
        ShowResultModal = true;
    }

    private async Task SaveResult()
    {
        if (TempResult.quizId == 0)
        {
            var quizResult = new QuizResultDto
                {
                    careTips = TempResult.careTips,
                    characteristic = TempResult.characteristic,
                    description = TempResult.description,
                    skinType = TempResult.skinType
                };
            var resultCommand = new CreateQuizResultCommand(quizResult);
            var createQuizResult = await Mediator.Send(resultCommand);
        }
        else
        {
            var updateEntity = new UpdateQuizResultDto
                {
                    quizId = TempResult.quizId,
                    careTips = TempResult.careTips,
                    characteristic = TempResult.characteristic,
                    description = TempResult.description,
                    skinType = TempResult.skinType
                };
            var updateResultCommand = new UpdateQuizResultCommand(updateEntity);
            var updatedResult = await Mediator.Send(updateResultCommand);
        }
        CloseResultModal();
    }

    private void DeleteResult(int id)
    {
        // var r = Results.FirstOrDefault(x => x.Id == id);
        // if (r != null)
        // {
        //     Results.Remove(r);
        // }
    }

    private void CloseResultModal()
    {
        ShowResultModal = false;
    }
}
