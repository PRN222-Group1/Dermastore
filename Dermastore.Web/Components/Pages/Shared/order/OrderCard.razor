@using Dermastore.Application.Commands.Vnpays
@using Dermastore.Application.DTOs.Orders
@using Dermastore.Web.Utils
@using MediatR

@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<div class="card order-card shadow-sm mb-3">
    <div class="card-header d-flex justify-content-between align-items-center @GetStatusBackgroundColor()">
        <div>
            <span class="fw-bold">Order #@Order.Id</span>
            <span class="badge ms-2 @GetStatusBadgeClass()">@Order.Status</span>
        </div>
        <span>@Order.OrderDate.ToString("MMM dd, yyyy")</span>
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-8">
                <p class="mb-1 text-truncate"><i class="bi bi-geo-alt me-1"></i> @Order.ShippingAddress</p>
                <p class="mb-1">
                    <strong>Items:</strong> @Order.OrderItems.Count
                    <span class="mx-2">|</span>
                    <strong>Total:</strong> @PriceFormatter.FormatPrice(Order.GetTotal())
                </p>
            </div>
            <div class="col-md-4">
                @if (Order.User != null)
                {
                    <p class="mb-1 text-end"><i class="bi bi-person me-1"></i> @Order.User.FirstName @Order.User.LastName</p>
                }

                @if (Order.DeliveryMethod != null)
                {
                    <p class="mb-1 text-end text-secondary"><small><i class="bi bi-truck me-1"></i> @Order.DeliveryMethod.Name</small></p>
                }
            </div>
        </div>

        <div class="order-items-preview">
            @foreach (var item in Order.OrderItems.Take(2))
            {
                <div class="d-flex align-items-center mb-1 pb-1 @(Order.OrderItems.IndexOf(item) < Order.OrderItems.Count - 1 ? "border-bottom" : "")">
                    <img src="@item.ItemOrdered.ImageUrl" alt="@item.ItemOrdered.ProductName"
                         class="me-2" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;"
                         onerror="this.src='/assets/NavMenuPlaceholder.png';" />
                    <div class="flex-grow-1">
                        <div class="text-truncate" style="max-width: 200px;">@item.ItemOrdered.ProductName</div>
                        <small>@PriceFormatter.FormatPrice(item.Price) × @item.Quantity</small>
                    </div>
                </div>
            }
            @if (Order.OrderItems.Count > 2)
            {
                <small class="text-secondary">+ @(Order.OrderItems.Count - 2) more items</small>
            }
        </div>
    </div>
    <div class="card-footer d-flex justify-content-between align-items-center">
        <a href="/orders/details/@Order.Id" class="btn btn-sm btn-outline-secondary">
            <i class="bi bi-eye me-1"></i> View Details
        </a>

        <div>
            <span class="fw-medium @GetStatusTextClass()">
                <i class="@GetStatusIcon() me-1"></i> @Order.Status
            </span>
        </div>
    </div>
</div>

<style>
    .order-card {
        transition: transform 0.2s ease;
        border-radius: 8px;
        overflow: hidden;
    }

    .order-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;
    }

    .order-card .card-header {
        background-color: #588157;
        color: #fff;
        padding: 0.75rem 1.25rem;
    }

    .order-card .card-body {
        padding: 1.25rem;
    }

    .order-card .order-items li {
        margin-bottom: 0.5rem;
    }

    .order-card .card-footer {
        background-color: #f8f9fa;
        padding: 0.75rem 1.25rem;
        text-align: right;
    }

    .status-pending {
        background-color: #fff8e6;
        border-left: 4px solid #f0ad4e;
    }

    .status-completed {
        background-color: #edf7ed;
        border-left: 4px solid #28a745;
    }

    .status-cancelled {
        background-color: #feecec;
        border-left: 4px solid #dc3545;
    }
</style>

@code {
    [Parameter]
    public OrderDto Order { get; set; } = null!;

    [Parameter]
    public string Role { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<(int OrderId, string Status)> OnStatusChanged { get; set; }

    private async Task OnPay(int orderId)
    {
        string paymentUrl = await Mediator.Send(new CreatePaymentUrlCommand(orderId));
        NavigationManager.NavigateTo(paymentUrl);
    }

    private string GetStatusBackgroundColor()
    {
        return Order.Status switch
        {
            "Pending" => "status-pending",
            "Completed" => "status-completed",
            "Cancelled" => "status-cancelled",
            _ => ""
        };
    }

    private string GetStatusBadgeClass()
    {
        return Order.Status switch
        {
            "Pending" => "bg-warning text-dark",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusTextClass()
    {
        return Order.Status switch
        {
            "Pending" => "text-warning",
            "Completed" => "text-success",
            "Cancelled" => "text-danger",
            _ => "text-secondary"
        };
    }

    private string GetStatusIcon()
    {
        return Order.Status switch
        {
            "Pending" => "bi bi-hourglass-split",
            "Completed" => "bi bi-check-circle",
            "Cancelled" => "bi bi-x-circle",
            _ => "bi bi-question-circle"
        };
    }
}