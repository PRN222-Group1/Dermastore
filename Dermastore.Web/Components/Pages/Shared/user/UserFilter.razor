@using Dermastore.Application.DTOs
@using Dermastore.Domain.Specifications.Users
@using MediatR
@rendermode InteractiveServer
@inject IMediator Mediator

<div class="filters p-3 border rounded shadow-sm">
    <!-- Search Bar -->
    <div class="mb-3">
        <h5 class="text-primary"><strong>Search Users</strong></h5>
        <input type="text" class="form-control" placeholder="Search users..."
               @bind="UserSpecParams.Search" />
    </div>

    <!-- Filter By Status -->
    <div class="mb-3">
        <h5 class="text-primary"><strong>Status</strong></h5>
        <select class="form-select" @bind="UserSpecParams.Status">
            <option value="">Select a status</option>
            <option value="Active">Active</option>
            <option value="Suspended">Suspended</option>
        </select>
    </div>

    <!-- Sort By Filter -->
    <div class="mb-3">
        <h5 class="text-primary"><strong>Sort By</strong></h5>
        <select class="form-select" @bind="UserSpecParams.Sort">
            <option value="nameAsc">Name, A to Z</option>
            <option value="nameDesc">Name, Z to A</option>
        </select>
    </div>

    <!-- Apply Filters Button -->
    <div class="text-center">
        <button class="btn btn-primary" @onclick="ApplyFilters"><i class="fa fa-search me-2"></i> Apply Filters</button>
    </div>
</div>

<div class="d-flex justify-content-center mt-5">
    <!-- Pagination Controls -->
    <ul class="pagination">
        @for (var i = 1; i <= TotalPages; i++)
        {
            var pageNumber = i;
            <li class="page-item @(i == UserSpecParams.PageIndex ? "active" : "")">
                <a class="page-link" style="cursor: pointer;" @onclick="(() => SetPage(pageNumber))">@i</a>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public UserSpecParams UserSpecParams { get; set; } = new();

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback OnFilterChanged { get; set; }

    [Parameter]
    public EventCallback OnPageChanged { get; set; }

    private async Task ApplyFilters()
    {
        UserSpecParams.PageIndex = 1;
        await OnFilterChanged.InvokeAsync();
    }

    private async Task SetPage(int pageIndex)
    {
        UserSpecParams.PageIndex = pageIndex;
        await OnPageChanged.InvokeAsync();
    }
}
